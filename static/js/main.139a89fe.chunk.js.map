{"version":3,"sources":["images/quiz.png","context/GlobalState.jsx","services/fetchQuestions.js","components/Question/Question.jsx","components/Settings/Difficulty/Difficulty.jsx","components/Settings/Category/Category.jsx","components/Settings/Settings/Settings.jsx","components/Main/Main.jsx","App.jsx","index.js"],"names":["GlobalContext","createContext","GlobalProvider","props","useState","category","setCategory","difficulty","setDifficulty","Provider","value","children","fetchQuestions","a","console","log","url","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Question","callback","userAnswer","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","onClick","difficultyOptions","Difficulty","useContext","type","onChange","e","target","name","style","textTransform","charAt","toUpperCase","slice","categoryOptions","Category","parseInt","index","Settings","Main","loading","setLoading","over","setOver","quizOver","setQuizOver","number","setNumber","score","setScore","questions","setQuestions","setAnswer","startQuiz","alt","src","Logo","TOTAL","length","opacity","undefined","currentTarget","correct","prev","answerObject","nextQuestion","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139a89fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/quiz.87d65349.png\";","import React, { createContext, useState } from 'react';\r\n\r\nexport const GlobalContext = createContext();\r\n\r\nexport const GlobalProvider = (props) => {\r\n    const [category, setCategory] = useState(9);\r\n    const [difficulty, setDifficulty] = useState(\"easy\");\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                category,\r\n                setCategory,\r\n                difficulty,\r\n                setDifficulty\r\n            }}>\r\n            { props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","// shuffle array\r\nconst shuffleArray = array =>\r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\n/* fetch questions from API and return array\r\nwhich contains all fetched data and shuffled array of correct and incorrect answers */\r\nexport const fetchQuestions = async (category, difficulty) => {\r\n    console.log(\"fetch\", category, difficulty);\r\n    const url = `https://opentdb.com/api.php?amount=10&category=${category}&difficulty=${difficulty}`;\r\n    const data = await (await fetch(url)).json();\r\n    return data.results.map(question => ({\r\n        ...question,\r\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n    }))\r\n}","import React from 'react';\r\nimport './question.css';\r\n\r\nconst Question = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <p className=\"question\" dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div className=\"questionsContainer\">\r\n                {answers.map(answer => (\r\n                    <button\r\n                        key={answer}\r\n                        className={\r\n                            !!userAnswer\r\n                                ? userAnswer?.correctAnswer === answer\r\n                                    ? \"correct questionButton\"\r\n                                    : userAnswer?.answer === answer\r\n                                        ? \"incorrect questionButton\"\r\n                                        : \"questionButton\"\r\n                                : \"questionButton\"\r\n                        }\r\n                        value={answer}\r\n                        disabled={!!userAnswer}\r\n                        onClick={callback}\r\n                    >\r\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\nexport default Question","import React, { useContext } from 'react';\r\nimport './difficulty.css';\r\nimport { GlobalContext } from '../../../context/GlobalState';\r\n\r\nconst difficultyOptions = [\r\n    \"easy\",\r\n    \"medium\",\r\n    \"hard\"\r\n]\r\n\r\nconst Difficulty = () => {\r\n\r\n    const { difficulty, setDifficulty } = useContext(GlobalContext);\r\n\r\n    const handleChange = e => {\r\n        setDifficulty(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"difficulty-container\">\r\n            <select\r\n                type=\"select\"\r\n                value={difficulty}\r\n                onChange={handleChange}\r\n                className=\"difficulty\">\r\n                {difficultyOptions.map((value) => (\r\n                    <option\r\n                        key={value}\r\n                        name={value}\r\n                        value={value}\r\n                        style={{ textTransform: 'capitalize' }}\r\n                    >\r\n                        {value.charAt(0).toUpperCase() + value.slice(1)}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\nexport default Difficulty","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../../../context/GlobalState';\r\nimport './category.css';\r\n\r\nconst categoryOptions = [\r\n    \"General knowledge\",\r\n    \"Books\",\r\n    \"Film\",\r\n    \"Music\",\r\n    \"Musicals and Theatres\",\r\n    \"Musicals\",\r\n    \"Video Games\",\r\n    \"Board Games\",\r\n    \"Science and Natural\",\r\n    \"Science: Computer\",\r\n    \"Science: Mathematics\",\r\n    \"Geography\",\r\n    \"History\",\r\n    \"Politics\",\r\n    \"Arts\",\r\n    \"Celebrities\",\r\n    \"Animal\",\r\n    \"Vehicles\"\r\n]\r\n\r\nconst Category = () => {\r\n\r\n    const { category, setCategory } = useContext(GlobalContext);\r\n\r\n    const handleChange = e => {\r\n        setCategory(parseInt(e.target.value));\r\n    }\r\n\r\n    return (\r\n        <div className=\"category-container\">\r\n            <select\r\n                type=\"select\"\r\n                value={category}\r\n                onChange={handleChange}\r\n                className=\"category\">\r\n                {categoryOptions.map((value, index) => (\r\n                    <option\r\n                        key={value}\r\n                        name={value}\r\n                        value={index + 9}\r\n                    >\r\n                        {value}\r\n                    </option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Category","import React from 'react';\r\nimport Difficulty from '../Difficulty/Difficulty';\r\nimport Category from '../Category/Category';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            <Difficulty />\r\n            <Category />\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React, { useState, useContext } from 'react';\r\nimport './main.css';\r\nimport Logo from '../../images/quiz.png';\r\nimport { GlobalContext } from '../../context/GlobalState';\r\nimport { fetchQuestions } from '../../services/fetchQuestions';\r\nimport Question from '../Question/Question';\r\nimport Settings from '../Settings/Settings/Settings';\r\n\r\nconst TOTAL = 10;\r\n\r\nconst Main = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [over, setOver] = useState(false);\r\n    const [quizOver, setQuizOver] = useState(true);\r\n    const [number, setNumber] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [questions, setQuestions] = useState([]);\r\n    const [answer, setAnswer] = useState([]);\r\n\r\n    const { category, difficulty } = useContext(GlobalContext);\r\n    \r\n    const startQuiz = async () => {\r\n        setLoading(true);\r\n        setScore(0);\r\n        setQuizOver(false);\r\n        setOver(false);\r\n        setQuestions(await fetchQuestions(category, difficulty));\r\n        setAnswer([]);\r\n        setNumber(0);\r\n        setLoading(false);\r\n    }\r\n\r\n    const checkAnswer = e => {\r\n        if (!quizOver) {\r\n            const answer = e.currentTarget.value;\r\n            const correct = questions[number].correct_answer === answer;\r\n            if (correct) setScore(prev => prev + 1);\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer,\r\n            };\r\n            setAnswer(prev => [...prev, answerObject]);\r\n        }\r\n    }\r\n\r\n\r\n    const nextQuestion = () => {\r\n        const nextQuestion = number + 1;\r\n        if (nextQuestion === TOTAL) {\r\n            setQuizOver(true);\r\n            setOver(true);\r\n        } else {\r\n            setNumber(prev => prev + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <img className=\"logo\" alt=\"logo\" src={Logo} />\r\n            {over && (\r\n                <div>\r\n                    <p className=\"score\">Score: {score}</p>\r\n                </div>\r\n            )}\r\n            {quizOver ? <Settings /> : null}\r\n            {quizOver || answer.length === TOTAL + 1 ? (\r\n                <button\r\n                    className=\"start\"\r\n                    style={over ? { opacity: 1 } : { opacity: 1 }}\r\n                    onClick={startQuiz}>\r\n                    {over ? <span>Play Again</span> : <span>Start Quiz</span>}\r\n                </button>\r\n            ) : null}\r\n            {loading ? <img className=\"img\" alt=\"loading\" src=\"https://www.fogelstad.org/core/dependencies/loader.gif\" /> : null}\r\n            {!loading && !quizOver && (\r\n                <Question\r\n                    question={questions[number].question}\r\n                    answers={questions[number].answers}\r\n                    userAnswer={answer ? answer[number] : undefined}\r\n                    callback={checkAnswer}\r\n                />\r\n            )}\r\n            {!quizOver &&\r\n                !loading &&\r\n                answer.length === number + 1 &&\r\n                number !== TOTAL ?\r\n                <button\r\n                    className=\"next opacity\"\r\n                    onClick={nextQuestion}\r\n                >Continue</button> : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Main","import React from 'react';\r\nimport './css/reset.css';\r\nimport './css/app.css';\r\nimport Main from './components/Main/Main';\r\nimport { GlobalProvider } from './context/GlobalState';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <GlobalProvider>\r\n        <Main />\r\n      </GlobalProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}